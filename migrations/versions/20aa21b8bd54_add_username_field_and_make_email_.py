"""Add username field and make email optional

Revision ID: 20aa21b8bd54
Revises: 
Create Date: 2025-05-21 00:10:12.507359

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '20aa21b8bd54'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # First add the username column as nullable
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('username', sa.String(length=50), nullable=True))
    
    # Set default usernames for existing users
    op.execute("UPDATE user SET username = 'user' || id WHERE username IS NULL")
    
    # Now make the username column non-nullable
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('username', existing_type=sa.String(length=50), nullable=False)
        
        # Make email nullable
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)
        
        # Add unique constraint on username
        try:
            batch_op.create_unique_constraint('uq_user_username', ['username'])
        except Exception as e:
            print(f"Error creating unique constraint: {e}")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        try:
            batch_op.drop_constraint('uq_user_username', type_='unique')
        except Exception as e:
            print(f"Error dropping unique constraint: {e}")
            
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=False)
        
        try:
            batch_op.drop_column('username')
        except Exception as e:
            print(f"Error dropping username column: {e}")

    # ### end Alembic commands ###
